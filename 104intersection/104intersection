#!/usr/bin/env python2.7
## 104intersection.py for  in /home/daelomin/rendu/Maths/104intersection
## 
## Made by Arnould Jean-Michel
## Login   <daelomin@epitech.net>
## 
## Started on  Mon Jan  4 21:44:02 2016 Arnould Jean-Michel
## Last update Thu Jan 14 16:09:37 2016 Arnould Jean-Michel
##

import sys, math

if len(sys.argv) != 9:
    print "USAGE:"
    print "\t./104intersection opt xp yp zp xv yv zv p"
    print "DESCRIPTION"
    print "\topt\tnumber of the option : 1 for a sphere, 2 for a cylinder, 3 for a cone"
    print "\t(xp, yp, zp)\tcoordinates of the point by which the light ray goes through"
    print "\t(xv, yv, zv)\tcoordinates of the direction vector of the light ray"
    print "\tp\tparameter : radius of the sphere, radius of the cylinder or angle formed by the cone and the Z-axis"
    exit(84)

def isnum(value):
    return str(value).replace(".","").replace("-", "").isdigit()

for i in range(1, len(sys.argv)):
    if (isnum(sys.argv[i])):
        pass
    else:
        print "Wrong argument : %s" % (sys.argv[i])
        exit(84)
        
def     res(x1, x2):
    a = float(sys.argv[2]) + x1 * float(sys.argv[5])
    b = float(sys.argv[3]) + x1 * float(sys.argv[6])
    c = float(sys.argv[4]) + x1 * float(sys.argv[7])
    d = float(sys.argv[2]) + x2 * float(sys.argv[5])
    e = float(sys.argv[3]) + x2 * float(sys.argv[6])
    f = float(sys.argv[4]) + x2 * float(sys.argv[7])
    print "(%.3lf, %.3lf, %.3lf)" % (d, e, f)
    print "(%.3lf, %.3lf, %.3lf)" % (a, b, c)
    
    
def     result(a, b, delta):
    if delta < 0:
        print "No intersection point"
    elif delta == 0:
        if (-b / 2 * a) == 0 and float(sys.argv[4]) == 0:
            print "There is an infinite number of intersetion points."
        else:
            print "1 intersection point :"
            print "(%.3lf, %.3lf, %.3lf)" % ((float(sys.argv[2]) + float(sys.argv[5]) * -(b / 2 * a)), (float(sys.argv[3]) + float(sys.argv[6]) * -(b / 2 * a)), (float(sys.argv[4]) + float(sys.argv[7]) * -(b / 2 * a)))
    elif delta > 0:
        x1 = (-b - math.sqrt(delta)) / (2 * a)
        x2 = (-b + math.sqrt(delta)) / (2 * a)
        print "2 intersection point :"
        res(x1, x2)
        
if sys.argv[1] == '1':
    print "sphere of radius %s" % (sys.argv[8])
    print "straight line going through the (%s,%s,%s) point and of direction vector (%s,%s,%s)" % (sys.argv[2], sys.argv[3], sys.argv[4], sys.argv[5], sys.argv[6], sys.argv[7])
    a = math.pow(float(sys.argv[5]), 2.0) + math.pow(float(sys.argv[6]), 2.0) + math.pow(float(sys.argv[7]), 2.0)
    b = 2 * ((float(sys.argv[2]) * float(sys.argv[5])) + (float(sys.argv[3]) * float(sys.argv[6])) + (float(sys.argv[4]) * float(sys.argv[7])))
    c = math.pow(float(sys.argv[2]), 2.0) + math.pow(float(sys.argv[3]), 2.0) + math.pow(float(sys.argv[4]), 2.0) - math.pow(float(sys.argv[8]), 2.0)
    delta = (b * b) - (4 * a * c)
#    print "DELTA : %lf\n A : %lf\nB : %lf\nC : %lf" % (delta, a, b, c)
    result(a, b, delta) 
    
if sys.argv[1] == '2':
    print "cylinder of radius %s" % (sys.argv[8])
    print "straight line going through the (%s,%s,%s) point and of direction vector (%s,%s,%s)" % (sys.argv[2], sys.argv[3], sys.argv[4], sys.argv[5], sys.argv[6], sys.argv[7])
    a = (math.pow(float(sys.argv[5]), 2.0) + math.pow(float(sys.argv[6]), 2.0))
    b = (2 * float(sys.argv[2]) * float(sys.argv[5])) + (2 * float(sys.argv[3]) * float(sys.argv[6]))
    c = math.pow(float(sys.argv[2]), 2.0) + math.pow(float(sys.argv[3]), 2.0) - math.pow(float(sys.argv[8]), 2.0)
    delta = (b * b) - (4 * a * c)
#    print "DELTA : %lf\n A : %lf\nB : %lf\nC : %lf" % (delta, a, b, c)
    result(a, b, delta) 
    
if sys.argv[1] == '3':
    print "cone of %s degree angle" % (sys.argv[8])
    print "straight line going through the (%s,%s,%s) point and of direction vector (%s,%s,%s)" % (sys.argv[2], sys.argv[3], sys.argv[4], sys.argv[5], sys.argv[6], sys.argv[7])
    a = math.pow(float(sys.argv[5]), 2.0) + math.pow(float(sys.argv[6]), 2.0) - (math.pow(float(sys.argv[7]), 2.0) / math.pow(math.tan(math.radians(float(sys.argv[8]))), 2.0))
    b = (2 * float(sys.argv[2]) * float(sys.argv[5])) + (2 * float(sys.argv[3]) * float(sys.argv[6])) - ( 2 *float(sys.argv[4]) * float(sys.argv[7]) / math.pow(math.tan(math.radians(float(sys.argv[8]))), 2.0))
    c = math.pow(float(sys.argv[2]), 2.0) + math.pow(float(sys.argv[3]), 2.0) - (math.pow(float(sys.argv[4]), 2.0) / math.pow(math.tan(math.radians(float(sys.argv[8]))), 2.0))
    delta = (b * b) - (4 * a * c)
#    print "DELTA : %lf\n A : %lf\nB : %lf\nC : %lf" % (delta, a, b, c)
    result(a, b, delta) 

exit (0)
